docker:
  enabled: true
  image: "docker:28.0.4-dind"
  replicas: 1
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/thomasrubini/cloud-paas
  # This sets the pull policy for images.
  pullPolicy: Always


# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "paas"

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: 8080
readinessProbe:
  httpGet:
    path: /
    port: 8080

# FIXME
volumes:
  - name: paas-data
    persistentVolumeClaim:
      claimName: paas-data

volumeMounts:
  - name: paas-data
    mountPath: /paas-data

db:
  password: &db_password "paas"
  url: "host=paas-postgresql user=paas dbname=paas" #FIXME

app:
  repo_fetch:
    enable: true
    period_secs: 120
  repo_dir: "/paas-data/repos"
  secrets:
    impl: "file"
    impl_file: "/paas-data/secrets.json"
  registry:
    repo_uri: "http://paas-docker-registry:5000/library"
    user: ""
    password: ""

postgresql:
  enabled: true
  auth:
    username: paas
    password: *db_password
    database: paas
  primary:
    persistence:
      enabled: true
      size: 8Gi
