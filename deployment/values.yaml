# Default values for deployment.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/thomasrubini/cloud-paas
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: paas.cassiopeia.dopolytech.fr
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
   - secretName: paas-tls
     hosts:
       - paas.cassiopeia.dopolytech.fr

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: 8080
readinessProbe:
  httpGet:
    path: /
    port: 8080

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

app:
  postgres_password: "paas"

env:
  - name: DB_URL
    value: "host=paas-postgresql user=paas password=paas dbname=paas"
  - name: DB_PASSWORD
    valueFrom:
      secretKeyRef:
        key: postgres_password
        name: paas-secrets
  - name: REPO_FETCH_ENABLE
    value: "true"
  - name: REPO_FETCH_PERIOD_SECS
    value: "120"
  - name: REPO_DIR
    value: "/tmp/repos"

  - name: SECRETS_IMPL
    value: "file"
  - name: SECRETS_IMPL_FILE
    value: "./paas-data/secrets.json"

  - name: REGISTRY_REPO_URI
    value: "harbor.phoenix.dopolytech.fr/library"
  - name: REGISTRY_USER
    value: "admin"
  - name: REGISTRY_PASSWORD
    value: "Hamstring-During-Washbasin-Arguably-Evoke1-Authentic"

  # Idk what to do with it
  - name: OIDC_BASE_URL
    value: "http://localhost:7079"
  - name: OIDC_USER_ID
    value: "paas-backend"
  - name: OIDC_USER_PASSWORD
    value: "paas-backend"
  - name: OIDC_REALM
    value: "master"
  - name: OIDC_CLIENT_ID
    value: "paas-backend"
  - name: OIDC_CLIENT_SECRET
    value: "paas-backend"


postgresql:
  enabled: true
  auth:
    username: paas
    password: "paas"
    database: paas
  primary:
    persistence:
      enabled: true
      size: 8Gi
